"""
Main Application Entry Point - Modularized Version

Pipeline Integrado Completo para An√°lisis de Datos Inmobiliarios
==================================================================

Este es el punto de entrada principal del sistema modularizado que orquesta
todos los componentes del pipeline de procesamiento de datos inmobiliarios.

Autor: Juan Camilo Ria√±o Molano
Fecha de creaci√≥n: 01/08/2025
Fecha de modularizaci√≥n: 08/08/2025
Versi√≥n: 4.1 - Pipeline Unificado Optimizado

ARQUITECTURA MODULAR:
====================
‚Ä¢ core/ - L√≥gica de negocio principal
  - pipeline_orchestrator.py: Orquestaci√≥n del pipeline
  - execution_modes.py: Modos de ejecuci√≥n (autom√°tico, interactivo, optimizado)
  - indicators_calculator.py: C√°lculo de indicadores clave
  - executive_diagrams.py: Generaci√≥n de diagramas ejecutivos

‚Ä¢ utils/ - Utilidades y herramientas
  - performance_metrics.py: M√©tricas de rendimiento y monitoreo
  - interactive_menu.py: Sistema de men√∫s interactivos

‚Ä¢ scripts/ - M√≥dulos de procesamiento espec√≠ficos
  - (Mantiene la misma estructura modular existente)

BENEFICIOS DE LA MODULARIZACI√ìN:
===============================
‚úì Mantenibilidad: C√≥digo m√°s f√°cil de entender y mantener
‚úì Escalabilidad: F√°cil agregar nuevas funcionalidades
‚úì Testabilidad: Tests unitarios m√°s espec√≠ficos y r√°pidos
‚úì Reutilizaci√≥n: Componentes reutilizables en diferentes contextos
‚úì Colaboraci√≥n: M√∫ltiples desarrolladores pueden trabajar simult√°neamente
‚úì Responsabilidad √∫nica: Cada m√≥dulo tiene una funci√≥n espec√≠fica

MODOS DE EJECUCI√ìN:
==================
‚Ä¢ MODO UNIFICADO: Pipeline optimizado con control de calidad (RECOMENDADO)
‚Ä¢ MODO AUTOM√ÅTICO: Ejecuta todo el flujo sin intervenci√≥n
‚Ä¢ MODO INTERACTIVO: Permite seleccionar m√≥dulos espec√≠ficos
‚Ä¢ MODO OPTIMIZADO: Pipeline con mejoras de performance
‚Ä¢ MODO AN√ÅLISIS: Solo an√°lisis e indicadores
‚Ä¢ MODO DIAGRAMAS: Solo generaci√≥n de visualizaciones
"""

import sys
import os
import argparse
from pathlib import Path

# Agregar ra√≠z del proyecto al path de Python para importaciones
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Importaciones principales
from core.pipeline_orchestrator import PipelineOrchestrator
from core.execution_modes import ExecutionModes
from core.indicators_calculator import IndicatorsCalculator
from core.executive_diagrams import ExecutiveDiagrams

# Importaciones de utilidades
from utils.performance_metrics import PerformanceMetrics
from utils.interactive_menu import InteractiveMenu

# Importaciones de scripts para funcionalidades espec√≠ficas
from scripts.analisis_exploratorio import ejecutar_analisis_completo


class MainApplication:
    """
    Main application class that coordinates all pipeline components
    """
    
    def __init__(self):
        """Inicializar la aplicaci√≥n principal"""
        self.orchestrator = PipelineOrchestrator()
        self.execution_modes = ExecutionModes()
        self.indicators_calculator = IndicatorsCalculator()
        self.executive_diagrams = ExecutiveDiagrams()
        self.performance_metrics = PerformanceMetrics()
        self.interactive_menu = InteractiveMenu()
    
    def run(self):
        """Punto de entrada principal de la aplicaci√≥n"""
        try:
            self.interactive_menu.show_header()
            
            while True:
                selected_option = self.interactive_menu.show_main_menu()
                
                if selected_option == "salir":
                    self._show_exit_message()
                    break
                
                self._handle_menu_selection(selected_option)
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrumpido por el usuario.")
            self._show_exit_message()
        except Exception as e:
            print(f"\n‚ùå Error inesperado en la aplicaci√≥n: {e}")
            print("üîß Por favor, reporte este error al equipo de desarrollo.")
    
    def _handle_menu_selection(self, option: str):
        """Manejar selecci√≥n de men√∫ del usuario"""
        try:
            if option == "pipeline_unificado":
                self._execute_unified_pipeline()
            elif option == "pipeline_optimizado":
                self._execute_optimized_pipeline()
            elif option == "modo_interactivo":
                self._execute_interactive_mode()
            elif option == "modo_automatico":
                self._execute_automatic_mode()
            elif option == "solo_analisis":
                self._execute_analysis_only()
            elif option == "solo_diagramas":
                self._execute_diagrams_only()
            elif option == "metricas":
                self._show_performance_metrics()
            elif option == "optimizaciones":
                self._show_optimizations_analysis()
            elif option == "ayuda":
                self._show_help()
            else:
                print(f"‚ùå Opci√≥n no implementada: {option}")
                
        except Exception as e:
            print(f"\n‚ùå Error ejecutando opci√≥n '{option}': {e}")
            print("üîÑ Volviendo al men√∫ principal...")
    
    def _execute_unified_pipeline(self):
        """Ejecutar pipeline unificado (recomendado)"""
        print("\nüöÄ Iniciando Pipeline Unificado...")
        try:
            # Establecer modo CLI si estamos en ejecuci√≥n de l√≠nea de comandos
            if hasattr(self, '_is_cli_mode') and self._is_cli_mode:
                self.orchestrator.set_cli_mode(True)
                
            metrics = self.orchestrator.ejecutar_pipeline_unificado()
            if metrics:
                self.performance_metrics.metrics.update(metrics)
                print("\n‚úÖ Pipeline Unificado completado exitosamente!")
        except Exception as e:
            print(f"‚ùå Error en Pipeline Unificado: {e}")
            print("üîÑ Verifique la configuraci√≥n y intente nuevamente.")
    
    def _execute_optimized_pipeline(self):
        """Ejecutar pipeline optimizado"""
        print("\n‚ö° Iniciando Pipeline Optimizado...")
        try:
            # Establecer modo CLI si estamos en ejecuci√≥n de l√≠nea de comandos
            if hasattr(self, '_is_cli_mode') and self._is_cli_mode:
                # Para pipeline optimizado, ejecutamos directamente sin interacci√≥n del usuario
                from scripts.pipeline_optimizado import ejecutar_pipeline_optimizado
                resultado = ejecutar_pipeline_optimizado()
                if resultado:
                    print("‚úÖ Pipeline Optimizado completado exitosamente!")
                else:
                    print("‚ö†Ô∏è Pipeline Optimizado completado con advertencias.")
            else:
                self.execution_modes.ejecutar_pipeline_optimizado()
        except Exception as e:
            print(f"‚ùå Error en Pipeline Optimizado: {e}")
    
    def _execute_interactive_mode(self):
        """Ejecutar modo interactivo"""
        print("\nüõ†Ô∏è Iniciando Modo Interactivo...")
        try:
            self.execution_modes.ejecutar_modo_interactivo()
        except Exception as e:
            print(f"‚ùå Error en Modo Interactivo: {e}")
    
    def _execute_automatic_mode(self):
        """Ejecutar modo autom√°tico completo"""
        print("\nüéØ Iniciando Modo Autom√°tico Completo...")
        try:
            # Establecer modo CLI si estamos en ejecuci√≥n de l√≠nea de comandos
            if hasattr(self, '_is_cli_mode') and self._is_cli_mode:
                self.orchestrator.set_cli_mode(True)
                
            self.execution_modes.ejecutar_modo_automatico_completo()
        except Exception as e:
            print(f"‚ùå Error en Modo Autom√°tico: {e}")
    
    def _execute_analysis_only(self):
        """Ejecutar solo an√°lisis exploratorio"""
        print("\nüî¨ Ejecutando Solo An√°lisis Exploratorio...")
        try:
            # Verificar primero datos limpios, luego datos procesados como respaldo
            if os.path.exists("data/cleanData/CLMUESTRA.csv"):
                data_source = "cleanData"
                print("üìÇ Usando datos limpios para an√°lisis...")
            elif os.path.exists("data/processedData/muestra.csv"):
                data_source = "processedData"
                print("üìÇ Usando datos procesados para an√°lisis (fallback)...")
            else:
                print("‚ùå No se encontraron datos para an√°lisis.")
                print("üí° Ejecute primero el pipeline de procesamiento.")
                return
            
            # Para ejecuci√≥n de l√≠nea de comandos, por defecto no mostrar gr√°ficos
            if hasattr(self, '_is_cli_mode') and self._is_cli_mode:
                show_graphics = False
                print("üñ•Ô∏è Modo l√≠nea de comandos: gr√°ficos deshabilitados")
            else:
                show_graphics = self.interactive_menu.confirm_action(
                    "¬øDesea mostrar gr√°ficos interactivos?", default=True
                )
            
            ejecutar_analisis_completo(mostrar_graficos=show_graphics)
            
            # Calcular indicadores despu√©s del an√°lisis
            calculate_indicators = True
            if not (hasattr(self, '_is_cli_mode') and self._is_cli_mode):
                calculate_indicators = self.interactive_menu.confirm_action(
                    "¬øDesea calcular tambi√©n los indicadores clave?", default=True
                )
            
            if calculate_indicators:
                print("üìä Calculando indicadores clave...")
                self.indicators_calculator.calcular_indicadores_clave()
                
        except Exception as e:
            print(f"‚ùå Error en an√°lisis exploratorio: {e}")
            import traceback
            traceback.print_exc()
    
    def _execute_diagrams_only(self):
        """Ejecutar solo generaci√≥n de diagramas ejecutivos"""
        print("\nüé® Generando Solo Diagramas Ejecutivos...")
        try:
            self.executive_diagrams.generar_todos_los_diagramas()
        except Exception as e:
            print(f"‚ùå Error generando diagramas: {e}")
    
    def _show_performance_metrics(self):
        """Mostrar m√©tricas de rendimiento actuales"""
        print("\nüìä Mostrando M√©tricas de Performance...")
        try:
            self.performance_metrics.show_current_metrics()
            
            # Ofrecer exportar m√©tricas
            if self.interactive_menu.confirm_action(
                "¬øDesea exportar las m√©tricas a un archivo?", default=False
            ):
                report_path = self.performance_metrics.export_metrics_report()
                print(f"‚úÖ M√©tricas exportadas a: {report_path}")
                
        except Exception as e:
            print(f"‚ùå Error mostrando m√©tricas: {e}")
    
    def _show_optimizations_analysis(self):
        """Mostrar an√°lisis de optimizaciones"""
        self.interactive_menu.show_optimizations_analysis()
    
    def _show_help(self):
        """Mostrar ayuda y documentaci√≥n"""
        self.interactive_menu.show_help()
    
    def _show_exit_message(self):
        """Mostrar mensaje de salida"""
        print("\n" + "=" * 60)
        print("üëã ¬°Gracias por usar el Sistema de Business Intelligence!")
        print("=" * 60)
        print("üìä Sistema desarrollado por Juan Camilo Ria√±o Molano")
        print("üè¢ Pipeline Integrado para An√°lisis Inmobiliario")
        print("üìÖ Versi√≥n 4.1 - Pipeline Unificado Optimizado")
        print("=" * 60)


def main():
    """Funci√≥n principal con an√°lisis de argumentos"""
    args = parse_arguments()
    app = MainApplication()
    
    # Si se proporcionan argumentos de l√≠nea de comandos, ejecutar directamente
    if args.unified:
        print("üöÄ Ejecutando Pipeline Unificado desde l√≠nea de comandos...")
        app._execute_unified_pipeline()
    elif args.optimized:
        print("‚ö° Ejecutando Pipeline Optimizado desde l√≠nea de comandos...")
        app._execute_optimized_pipeline()
    elif args.automatic:
        print("üéØ Ejecutando Modo Autom√°tico desde l√≠nea de comandos...")
        app._execute_automatic_mode()
    elif args.analysis_only:
        print("ÔøΩ Ejecutando Solo An√°lisis desde l√≠nea de comandos...")
        app._execute_analysis_only()
    elif args.diagrams_only:
        print("üé® Ejecutando Solo Diagramas desde l√≠nea de comandos...")
        app._execute_diagrams_only()
    else:
        # Ejecutar modo interactivo
        app.run()


# Funciones de retrocompatibilidad
def ejecutar_analisis_exploratorio_interactivo():
    """Funci√≥n de retrocompatibilidad para an√°lisis exploratorio"""
    try:
        if not os.path.exists("data/cleanData/CLMUESTRA.csv"):
            print("‚ùå No se encontraron datos limpios.")
            print("üí° Ejecute primero el pipeline de procesamiento.")
            return
        
        menu = InteractiveMenu()
        show_graphics = menu.confirm_action(
            "¬øDesea mostrar gr√°ficos interactivos?", default=True
        )
        
        ejecutar_analisis_completo(mostrar_graficos=show_graphics)
        print("‚úÖ An√°lisis exploratorio completado.")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis exploratorio: {e}")


def parse_arguments():
    """Analizar argumentos de l√≠nea de comandos"""
    parser = argparse.ArgumentParser(
        description="Pipeline Integrado para An√°lisis de Datos Inmobiliarios",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos de uso:
  python main.py                    # Modo interactivo (men√∫)
  python main.py --unified           # Ejecutar pipeline unificado
  python main.py --optimized         # Ejecutar pipeline optimizado
  python main.py --analysis-only     # Solo an√°lisis exploratorio
  python main.py --diagrams-only     # Solo diagramas ejecutivos
        """
    )
    
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--unified", "-u",
        action="store_true",
        help="Ejecutar pipeline unificado (recomendado)"
    )
    group.add_argument(
        "--optimized", "-o",
        action="store_true",
        help="Ejecutar pipeline optimizado"
    )
    group.add_argument(
        "--automatic", "-a",
        action="store_true",
        help="Ejecutar modo autom√°tico completo"
    )
    group.add_argument(
        "--analysis-only", "-an",
        action="store_true",
        help="Solo ejecutar an√°lisis exploratorio"
    )
    group.add_argument(
        "--diagrams-only", "-d",
        action="store_true",
        help="Solo generar diagramas ejecutivos"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Mostrar informaci√≥n detallada de ejecuci√≥n"
    )
    
    return parser.parse_args()


# Backward compatibility functions
def ejecutar_analisis_exploratorio_interactivo():
    """Backward compatibility function for exploratory analysis"""
    try:
        if not os.path.exists("data/cleanData/CLMUESTRA.csv"):
            print("‚ùå No se encontraron datos limpios.")
            print("üí° Ejecute primero el pipeline de procesamiento.")
            return
        
        menu = InteractiveMenu()
        show_graphics = menu.confirm_action(
            "¬øDesea mostrar gr√°ficos interactivos?", default=True
        )
        
        ejecutar_analisis_completo(mostrar_graficos=show_graphics)
        print("‚úÖ An√°lisis exploratorio completado.")
        
    except Exception as e:
        print(f"‚ùå Error en an√°lisis exploratorio: {e}")


def main():
    """Main function with argument parsing"""
    args = parse_arguments()
    app = MainApplication()
    
    # Set CLI mode flag for non-interactive execution
    if any([args.unified, args.optimized, args.automatic, args.analysis_only, args.diagrams_only]):
        app._is_cli_mode = True
    
    # If command line arguments are provided, execute directly
    if args.unified:
        print("üöÄ Ejecutando Pipeline Unificado desde l√≠nea de comandos...")
        app._execute_unified_pipeline()
    elif args.optimized:
        print("‚ö° Ejecutando Pipeline Optimizado desde l√≠nea de comandos...")
        app._execute_optimized_pipeline()
    elif args.automatic:
        print("üéØ Ejecutando Modo Autom√°tico desde l√≠nea de comandos...")
        app._execute_automatic_mode()
    elif args.analysis_only:
        print("üî¨ Ejecutando Solo An√°lisis desde l√≠nea de comandos...")
        app._execute_analysis_only()
    elif args.diagrams_only:
        print("üé® Ejecutando Solo Diagramas desde l√≠nea de comandos...")
        app._execute_diagrams_only()
    else:
        # Run interactive mode
        app.run()


# Legacy function imports for backward compatibility
try:
    from scripts.clean_and_backup_data import clean_and_backup_data
    from scripts.obtain_data import obtain_data
    from scripts.tratamiento_inconsistencias import ejecutar_tratamiento_inconsistencias
    from scripts.clean_muestra import clean_muestra
    from scripts.clean_estados import clean_estados
    from scripts.test_db_connection import probar_conexion_db
    from scripts.load_to_sql import main as load_to_sql_main
    from scripts.export_sql_to_excel import export_sql_to_excel
except ImportError as e:
    print(f"‚ö†Ô∏è Advertencia: No se pudieron importar algunos m√≥dulos legacy: {e}")


if __name__ == "__main__":
    main()
